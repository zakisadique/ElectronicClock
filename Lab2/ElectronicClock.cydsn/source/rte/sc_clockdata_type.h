
/*
 * Filename: sc_clockdata_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: Signalclass
 */

#ifndef _H_DEFINE_SC_CLOCKDATA_TYPE
#define _H_DEFINE_SC_CLOCKDATA_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_CLOCKDATA_INCLUDES */

/* USER CODE END SC_CLOCKDATA_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_CLOCKDATA signal    
 **********************************************************************/

/* USER CODE START SC_CLOCKDATA_USERDEFINITIONS */
typedef struct {
    boolean_t m_updateRequired;
    uint8_t value;
    boolean_t m_editing;
} CLOCK_Widget_t;

/* USER CODE END SC_CLOCKDATA_USERDEFINITIONS */

typedef 
/* USER CODE START SC_CLOCKDATA_SIGNALDATADEFINITION */
struct
{
//	#error "Provide your data structure"
    
    CLOCK_Widget_t m_minutes;
    CLOCK_Widget_t m_hours;
    
} 
/* USER CODE END SC_CLOCKDATA_SIGNALDATADEFINITION */
SC_CLOCKDATA_data_t;

/* USER CODE START InitSC_CLOCKDATA */
//#error "Provide a sensible init value"
#define SC_CLOCKDATA_INIT_DATA ((SC_CLOCKDATA_data_t){{FALSE, 0, FALSE},{FALSE, 0, FALSE}})
/* USER CODE END InitSC_CLOCKDATA */




/**
 * Default OUT driver API
 * \param const SC_CLOCKDATA_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_CLOCKDATA_driverOut(const SC_CLOCKDATA_data_t  *const data);


/* USER CODE START SC_CLOCKDATA_USERFUNCTIONS */

/* USER CODE END SC_CLOCKDATA_USERFUNCTIONS */


#endif